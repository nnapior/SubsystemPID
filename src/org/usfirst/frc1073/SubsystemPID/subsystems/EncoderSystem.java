// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.SubsystemPID.subsystems;

import org.usfirst.frc1073.SubsystemPID.RobotMap;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 * An encoder subsystem that implements PIDSubsystem for use with multiple PIDThreads
 */
public class EncoderSystem extends Subsystem implements PIDSubsystem{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder frontLeftEncoder = RobotMap.encoderSystemfrontLeftEncoder;
    Encoder frontRightEncoder = RobotMap.encoderSystemfrontRightEncoder;
    Encoder backLeftEncoder = RobotMap.encoderSystembackLeftEncoder;
    Encoder backRightEncoder = RobotMap.encoderSystembackRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    private static double topSpeed = 8.0; //for mobile mecanum base, feet per second
    private boolean isPID;
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    	isPID = true;
    }
    
	/**
	* Sets the encoder unit scale (change for non-mobile base)
	*/
    public void setUnitScale(){
    	backLeftEncoder.setDistancePerPulse(0.017453);
		backRightEncoder.setDistancePerPulse(0.017453);
		frontLeftEncoder.setDistancePerPulse(0.017453);
		frontRightEncoder.setDistancePerPulse(0.017453);
    }
    
	/**
	* IMPORTANT - Sets Robot top speed.
	* Actual robot top speed must be reported here, in the same unit scale as the encoders 
	* @param newSpeed - the new robot top speed
	*/
    public void setTopSpeed(double newSpeed){
    	topSpeed = newSpeed;
    }
    
	//manual encoder calls
    public double getFrontLeftSpeed(){
    	return (frontLeftEncoder.getRate() / 12) / topSpeed;
    }
    
    public double getFrontRightSpeed(){
    	return (frontRightEncoder.getRate() / 12) / topSpeed;
    }
    
    public double getBackLeftSpeed(){
    	return (backLeftEncoder.getRate() / 12) / topSpeed;
    }
    
    public double getBackRightSpeed(){
    	return (backRightEncoder.getRate() / 12) / topSpeed;
    }
    
	//PID-specific methods for getting encoder data
	@Override
	public double getPIDSource(int marker) {
		if (isPID) {
			switch (marker) {
			case 0:
				return (frontLeftEncoder.getRate() / 12) / topSpeed;
			case 1:
				return (frontRightEncoder.getRate() / 12) / topSpeed;
			case 2:
				return (backLeftEncoder.getRate() / 12) / topSpeed;
			case 3:
				return (backRightEncoder.getRate() / 12) / topSpeed;
			default:
				return 0;
			}
		} else {
			return 0;
		}
	}
	
	@Override
	public void setPIDOutput(double output, int marker) {
		//do nothing here
	}
	
	public void enablePIDEncoderParameter(){
		isPID = true;
	}
	
	public void disablePIDEncoderParameter(){
		isPID = false;
	}
	
}

